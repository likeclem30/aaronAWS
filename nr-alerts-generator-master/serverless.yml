# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: nr-alert-generator # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  timeout: 60
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
      Resource:
         Fn::Join:
           - ""
           - - "arn:aws:s3:::"
             - "${self:custom.aws.s3.bucket.name.${opt:stage}}"
             - "/*"
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:ssm:"
            - "${self:custom.aws.region}:"
            - "${self:custom.aws.account_ids.${opt:stage}}:"
            - "parameter/nr-alert-generator*"
    - Effect: "Allow"
      Action: "kms:Decrypt"
      Resource: 
        Fn::Join:
          - ""
          - - "arn:aws:kms:"
            - "${self:custom.aws.region}:"
            - "${self:custom.aws.account_ids.${opt:stage}}:"
            - "key/"
            - "${self:custom.aws.kms.key_id.${opt:stage}}"

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**
  exclude:
    - .templates

functions:
  main:
    handler: handler.main
    events:
      - s3:
          bucket: ${self:custom.aws.s3.bucket.name.${opt:stage}}
          event: s3:ObjectCreated:*
    environment:
      NEW_RELIC_INFRA_API_PARAMETER_NAME: ${self:custom.aws.parameters.new_relic.api_key.${opt:stage}}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2


# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements

custom:
  aws:
    region: ${opt:region, self:provider.region}
    account_ids:
      dev: 392164873763
      prod: 949421251013
    kms:
      key_id:
        dev: 3b955749-a93b-488a-b1c2-99cd24093eb4
        prod: 19467aff-bc6f-447e-8adc-faea9013ceea
    parameters:
      new_relic:
        api_key:
          dev: /nr-alert-generator/dev/new-relic-api-key
          prod: /nr-alert-generator/prod/new-relic-api-key
    s3:
      bucket:
        name:
          dev: ndm-ppv-npn-nr-alerts-config
          prod: ndm-ppv-nr-alerts-config
  pythonRequirements:
    dockerizePip: non-linux