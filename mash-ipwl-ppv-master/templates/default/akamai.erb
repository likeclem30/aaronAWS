server {
	listen 80;
  server_tokens off;

	server_name <%= @site['domain'] %>;

  <% if @site['set_client_max_body_size'] %>
  client_max_body_size <%= @site['set_client_max_body_size'] %>;
  <% end %>
  
  <% if @site["locations"].select {|l| l['protocol'] != 'https' and l['name'] == "/"}.empty? %>
  location / {
    error_page 302 301 /300.html;
    return 302 "<%= @default_url %>";
  }

  location = /300.html {
    root /usr/share/nginx/html;
  }
  <% end %>

  # START LOOP - all site locations
  <% @site["locations"].select {|l| l['protocol'] != 'https' }.each do |location| %>
  	
  <% if location['tenant_id'] && location['502_custom_page'] %>
  location = /502_<%= location['name'].gsub('/','l_') %>.html {
    root /usr/share/nginx/html;
  }
  <% end %>

  location <%= location["name"] %> {
    <% if location['tenant_id'] && location['502_custom_page'] %>
    recursive_error_pages on;
    proxy_intercept_errors on;
    error_page 502 503 /502_<%= location['name'].gsub('/','l_') %>.html;
    <% end %>

    # START IPWL_BYPASS = FALSE
    <% unless (@ipwl_atts['mode_ipwl_bypass']) && (location.key?('ipwl_bypass') && location['ipwl_bypass']) %>
    
    access_by_lua '
        function nginx_redirect_error(status_code, msg_error)
          ngx.log(ngx.ERR, "error: ", msg_error)
          ngx.status = status_code
          ngx.header.Location = "<%= location['reject_url'] %>"
          ngx.header.IPWL_error = msg_error
          ngx.header.IPWL_rejected = "true"
          ngx.print("302")
          ngx.exit(302)
        end

        ngx.log(ngx.ERR,"X-Forwarded-For Header as I get it via HTTP ", ngx.var.http_x_forwarded_for)
        ngx.log(ngx.ERR,"Location matching:  <%= location["name"] %>")
        
        -- Lets parse the forwarder_for header separateing by commas
        local iterator, err = ngx.re.gmatch(ngx.var.http_x_forwarded_for, "([0-9]{1,3}.){3}([0-9]{1,3})")
        
        if not iterator then
          nginx_redirect_error(302, "Error occured when http_x_forwarded_for has been parsed")
          return      
        end

        local forwarded_ip = false
        local indexed_ips = {}
        -- Iterate to add the ip address in a new table named indexed_ips
        for ip in iterator do
          forwarded_ip = ip[0]
          ngx.log(ngx.ERR,"Iterating: ", forwarded_ip)
          table.insert(indexed_ips, forwarded_ip)
        end

        -- Check the ips
        local last_index = table.getn(indexed_ips)
        local before_last_ip = indexed_ips[last_index - 1]
        local last_ip = indexed_ips[last_index]
        local true_client_ip = ngx.var.http_true_client_ip

        if before_last_ip == nil then
          ngx.log(ngx.ERR, "Direct connection (no proxy) detected")
          nginx_redirect_error(302, "Access DENIED for "..ngx.var.http_x_forwarded_for)
          return
        else
          ngx.log(ngx.ERR, "Connection via Proxy detected")
        end

        if trusted_proxies<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>[last_ip] and customers_ips<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>[before_last_ip] then
          ngx.log(ngx.ERR, "Access GRANTED to proxy ip ", last_ip)
          ngx.log(ngx.ERR, "Access GRANTED to client ip ", before_last_ip)
        else
          -- If not trusted proxy it means it comes from Akamai
          
          if true_client_ip then
            ngx.log(ngx.ERR, "Checking with the true_client_ip from Akamai")
            before_last_ip = true_client_ip
          end

          if customers_ips<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>[before_last_ip] then
            ngx.log(ngx.ERR, "Access GRANTED to client ip ", before_last_ip)
          else
            local iputils = require("iputils")
            whitelist = iputils.parse_cidrs(customers_range_ips<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>)
            if iputils.ip_in_cidrs(before_last_ip, whitelist) then
              ngx.log(ngx.ERR, "Access GRANTED to client ip (by range checking) ", before_last_ip)
            else
              nginx_redirect_error(302, "Access DENIED for "..ngx.var.http_x_forwarded_for)
              return
            end
          end
        end

        ngx.log(ngx.ERR, "HTTP Current Cookies: ", ngx.var.http_cookie)
        -- Lets check the AuthCookie if exist
        if (ngx.var.cookie_IPWL_CALLBACK) then
          if not (ngx.var.cookie_IPWL_AUTH_<%= location["name"].tr("/|()-","_") %> == secrets<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>) then
            ngx.header.Location = ngx.var.cookie_IPWL_CALLBACK
            ngx.header["Set-Cookie"] = "IPWL_AUTH_<%= location["name"].tr("/|()-","_") %>=" .. secrets<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %> .. ";IPWL_CALLBACK=none"
            ngx.status = 302
            ngx.log(ngx.ERR, "Cookie Auth failed ! For ip: "..last_ip)
            ngx.print(302)
            ngx.exit(302)
            return
          end
        end
        
        <% if location["redirection"] == "URL" %>
        ngx.status = <%= location['redirection_code'] %>
        ngx.header.Location = "<%= location['redirection_url'] %>"
        ngx.print("<%= location['redirection_code'] %>")
        ngx.exit(<%= location['redirection_code'] %>)
        <% elsif location["redirection"] == "ProtocolChange" %>
        ngx.status = <%= location['redirection_code'] %>
        ngx.header.Location = "https://" .. ngx.var.host .. ngx.var.request_uri
        ngx.print("<%= location['redirection_code'] %>")
        ngx.exit(<%= location['redirection_code'] %>)
        <% end %>

    ';
    <% end %>
    # END IPWL_BYPASS = FALSE
    
    resolver <%= @default_nameserver %> valid=10s;
    set $shttp<%= location["name"].tr("/|()-","_") %>_upstream "<%= location['remote_url'] %>";
    <% if ((location['remote_protocol'] == "keep" or location['remote_protocol'] == "http") and location['remote_url'] != "None") %>

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $http_connection;

      <% if location['pass_host'] %>
      proxy_set_header Host $host;
      <% end %>

      <% if location['timeout'] %>
      proxy_connect_timeout <%= location['timeout'] %>;
      proxy_send_timeout <%= location['timeout'] %>;
      proxy_read_timeout <%= location['timeout'] %>;
      <% end %>

      proxy_pass  http://$shttp<%= location["name"].tr("/|()-","_") %>_upstream;

    <% elsif location['remote_url'] != "None" %>

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $http_connection;

      <% if location['pass_host'] %>
      proxy_set_header Host $host;
      <% end %>

      <% if location['timeout'] %>
      proxy_connect_timeout <%= location['timeout'] %>;
      proxy_send_timeout <%= location['timeout'] %>;
      proxy_read_timeout <%= location['timeout'] %>;
      <% end %>

      proxy_pass  https://$shttp<%= location["name"].tr("/|()-","_") %>_upstream;

    <% end %>

  }        
  <% end %>
  # END LOOP - all site locations
  
}

server {
  listen 443;

  ssl on;
  ssl_certificate /etc/nginx/ssl/nginx.crt;
  ssl_certificate_key /etc/nginx/ssl/nginx.key;

  ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
  ssl_prefer_server_ciphers on;

  server_name <%= @site['domain'] %>;
  server_tokens off;
  
  <% if @site['set_client_max_body_size'] %>
  client_max_body_size <%= @site['set_client_max_body_size'] %>;
  <% end %>

  <% if @site["locations"].select {|l| l['protocol'] != 'http' and l['name'] == "/"}.empty? %>   
  location / {
    error_page 302 301 /300.html;
    return 302 "<%= @default_url %>";
  }

  location = /300.html {
    root /usr/share/nginx/html;
  }
  <% end %>

  # START LOOP - all site locations
  <% @site["locations"].select {|l| l['protocol'] != 'http' }.each do |location| %>
  	
  <% if location['tenant_id'] && location['502_custom_page'] %>
  location = /502_<%= location['name'].gsub('/','l_') %>.html {
    root /usr/share/nginx/html;
  }
  <% end %>

  location <%= location['name'] %> {
    <% if location['tenant_id'] && location['502_custom_page'] %>
    recursive_error_pages on;
    proxy_intercept_errors on;
    error_page 502 503 /502_<%= location['name'].gsub('/','l_') %>.html;
    <% end %>

    # START IPWL_BYPASS = FALSE
    <% unless (@ipwl_atts['mode_ipwl_bypass']) && (location.key?('ipwl_bypass') && location['ipwl_bypass']) %>
    
    access_by_lua '
        function nginx_redirect_error(status_code, msg_error)
          ngx.log(ngx.ERR, "error: ", msg_error)
          ngx.status = status_code
          ngx.header.Location = "<%= location['reject_url'] %>"
          ngx.header.IPWL_error = msg_error
          ngx.header.IPWL_rejected = "true"
          ngx.print("302")
          ngx.exit(302)
        end


        ngx.log(ngx.ERR,"X-Forwarded-For Header as I get it via HTTPS ", ngx.var.http_x_forwarded_for)
        ngx.log(ngx.ERR,"True-Client-IP Header as I get it via HTTPS ", ngx.var.http_true_client_ip)

        -- Lets parse the forwarder_for header separateing by commas
        local iterator, err = ngx.re.gmatch(ngx.var.http_x_forwarded_for, "([0-9]{1,3}.){3}([0-9]{1,3})")
        
        if not iterator then
          nginx_redirect_error(302, "Error occured when http_x_forwarded_for has been parsed")
          return      
        end

        local forwarded_ip = false
        local indexed_ips = {}
        -- Iterate to add the ip address in a new table named indexed_ips
        for ip in iterator do
          forwarded_ip = ip[0]
          ngx.log(ngx.ERR,"Iterating: ", forwarded_ip)
          table.insert(indexed_ips, forwarded_ip)
        end

        -- Check the ips
        local last_index = table.getn(indexed_ips)
        local before_last_ip = indexed_ips[last_index - 1]
        local last_ip = indexed_ips[last_index]
        local true_client_ip = ngx.var.http_true_client_ip

        if before_last_ip == nil then
          ngx.log(ngx.ERR, "Direct connection (no proxy) detected")
          nginx_redirect_error(302, "Access DENIED for "..ngx.var.http_x_forwarded_for)
          return
        else
          ngx.log(ngx.ERR, "Connection via Proxy detected")
        end

        if trusted_proxies<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>[last_ip] and customers_ips<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>[before_last_ip] then
          ngx.log(ngx.ERR, "Access GRANTED to proxy ip ", last_ip)
          ngx.log(ngx.ERR, "Access GRANTED to client ip ", before_last_ip)
        elseif trusted_proxies<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>[last_ip] and (ngx.var.cookie_IPWL_AUTH_<%= location["name"].tr("/|()-","_") %> == secrets<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>) then
          ngx.log(ngx.ERR, "Access GRANTED to proxy ip ", last_ip)
        elseif trusted_proxies<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>[last_ip] and not (ngx.var.cookie_IPWL_AUTH_<%= location["name"].tr("/|()-","_") %> == secrets<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>) then
          ngx.header.Location = "http://" .. ngx.var.host .. ngx.var.request_uri 
          ngx.header["Set-Cookie"] = "IPWL_CALLBACK=https://" .. ngx.var.host .. ngx.var.request_uri
          ngx.status = 302
          ngx.log(ngx.ERR,  "Cookie is not present, requesting authentication ! For ip: "..last_ip)
          ngx.print(302)
          ngx.exit(302)
          return
        else
          -- If not trusted proxy it means it comes from Akamai
          
          if true_client_ip then
            ngx.log(ngx.ERR, "Checking with the true_client_ip from Akamai")
            before_last_ip = true_client_ip
          end

          if customers_ips<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>[before_last_ip] then
            ngx.log(ngx.ERR, "Access GRANTED to client ip ", before_last_ip)
          else
            local iputils = require("iputils")
            whitelist = iputils.parse_cidrs(customers_range_ips<%= "[\"#{@site["domain"]}\"][\"#{location["name"]}\"]" %>)
            if iputils.ip_in_cidrs(before_last_ip, whitelist) then
              ngx.log(ngx.ERR, "Access GRANTED to client ip (by range checking) ", before_last_ip)
            else
              nginx_redirect_error(302, "Access DENIED for "..ngx.var.http_x_forwarded_for)
              return
            end
          end
        end

        <% if location["redirection"] == "URL" %>
        ngx.status = <%= location['redirection_code'] %>
        ngx.header.Location = "<%= location['redirection_url'] %>"
        ngx.print("<%= location['redirection_code'] %>")
        ngx.exit(<%= location['redirection_code'] %>)
        <% elsif location["redirection"] == "ProtocolChange" %>
        ngx.status = <%= location['redirection_code'] %>
        ngx.header.Location = "http://" .. ngx.var.host .. ngx.var.request_uri
        ngx.print("<%= location['redirection_code'] %>")
        ngx.exit(<%= location['redirection_code'] %>)
        <% end %>
       
    ';
    <% end %>
    # END IPWL_BYPASS = FALSE
    
    resolver <%= @default_nameserver %> valid=10s;
    set $shttp<%= location["name"].tr("/|()-","_") %>_upstream "<%= location['remote_url'] %>";

    <% if ((location['remote_protocol'] == "keep" or location['remote_protocol'] == "https") and location['remote_url'] != "None") %>

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $http_connection;

      <% if location['pass_host'] %>
      proxy_set_header Host $host;
      <% end %>

      <% if location['timeout'] %>
      proxy_connect_timeout <%= location['timeout'] %>;
      proxy_send_timeout <%= location['timeout'] %>;
      proxy_read_timeout <%= location['timeout'] %>;
      <% end %>

      proxy_pass  https://$shttp<%= location["name"].tr("/|()-","_") %>_upstream;

    <% elsif location['remote_url'] != "None" %>

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $http_connection;

      <% if location['pass_host'] %>
      proxy_set_header Host $host;
      <% end %>

      <% if location['timeout'] %>
      proxy_connect_timeout <%= location['timeout'] %>;
      proxy_send_timeout <%= location['timeout'] %>;
      proxy_read_timeout <%= location['timeout'] %>;
      <% end %>

      proxy_pass  http://$shttp<%= location["name"].tr("/|()-","_") %>_upstream;
      
    <% end %>
  }
  <% end %>
  # END LOOP - all site locations
}

